#!/usr/bin/env python
#
# Copyright (C) 2013 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""
Given a target-files-package (TFP), produce a bootable USB installation
image that installs that build. This image should be safe from tampering
as all the components on the installation media are signed or are inside
a signed container.

Internally, the installation image sets up the partition table, bootloader,
and recovery console, and then reboots to apply a full-image OTA update
which provisions the rest of the system.

This tool needs to be called from the ANDROID_BUILD_TOP.

Usage: provision_from_target_files [flags] input_target_files output_usb_image

  -o  (--ota_args) "<arguments...>"
      This script makes a sub-call to ota_from_target_files to assemble
      the OTA update which provisions most of the system. If any additional
      arguments need to be supplied you should do so here.

  -O  (--ota_update) <filename>
      Supply the embedded OTA update instead of building it here.

  -M  (--mkbootimg_args) <args>
      Override mkbootimg_args in META/misc_info.txt. For secure boot scenarios
      this typically has key/signing tool information.
"""


import sys
import os
import subprocess
import tempfile
import shutil
import zipfile

outdir = os.environ["ANDROID_PRODUCT_OUT"]
hostdir = os.environ["ANDROID_HOST_OUT"]

sys.path.append(os.path.join("build/tools/releasetools"))

# releasetools library
import common

OPTIONS = common.OPTIONS
OPTIONS.extra_script = None
OPTIONS.ota_update = None
OPTIONS.kernel_cmdline = "vt.init_hide=0 androidboot.iago.ini=/iago.ini,/iago-default.ini,/iago-provision.ini"

def call(args, **kwargs):
    if OPTIONS.verbose:
        print "  running: ", " ".join(args)
    subprocess.check_call(args, **kwargs)


loader_config = """
timeout 0
default provision
"""

loader_provision_config = """
title Provision Android
androidfile provision.img
"""

def main(argv):
    mkbootimg_args = None

    def option_handler(o, a):
        if o in ("-o", "--ota_args"):
            OPTIONS.ota_args = a
        elif o in ("-O", "--ota_update"):
            OPTIONS.ota_update = a
        elif o in ("-M", "--mkbootimg_args"):
            mkbootimg_args = a
        else:
            return False
        return True

    args = common.ParseOptions(argv, __doc__,
                               extra_opts="o:O:M:",
                               extra_long_opts=["ota_args=",
                                                "ota_update=",
                                                "mkbootimg_args="],
                               extra_option_handler=option_handler)
    if len(args) != 2:
        common.Usage(__doc__)
        sys.exit(1)

    if OPTIONS.extra_script is not None:
        OPTIONS.extra_script = open(OPTIONS.extra_script).read()

    print "unzipping target-files..."
    OPTIONS.input_tmp, input_zip = common.UnzipTemp(args[0])
    OPTIONS.info_dict = common.LoadInfoDict(input_zip)
    if mkbootimg_args:
        OPTIONS.info_dict["mkbootimg_args"] = mkbootimg_args

    if OPTIONS.verbose:
        print "--- target info ---"
        common.DumpInfoDict(OPTIONS.info_dict)

    output_root = tempfile.mkdtemp(prefix="provision_tfp-")
    imagesdir = os.path.join(output_root, "images/")
    os.makedirs(imagesdir)
    OPTIONS.tempfiles.append(output_root)

    # Put the signed recovery console image in the filesystem root
    recovery_img = common.GetBootableImage("recovery.img", "recovery.img",
            OPTIONS.input_tmp, "RECOVERY")
    r = open(os.path.join(imagesdir, "recovery.img"), 'w')
    r.write(recovery_img.data)
    r.close()

    # build provisioning media boot image with the iago binary
    # and ini files in the rootfs.
    # Derive it from the BOOT image
    boot_root = tempfile.mkdtemp(prefix="prov-bootimage-")
    OPTIONS.tempfiles.append(boot_root)
    ramdisk_root = os.path.join(boot_root, "PROVISION/RAMDISK");
    shutil.copytree(os.path.join(OPTIONS.input_tmp, "BOOT"),
                    os.path.join(boot_root, "PROVISION"))

    # Extract the miscellaneous files we need from the iago provision zip in RADIO/
    prov_root = tempfile.mkdtemp(prefix="iago-prov-files-")
    OPTIONS.tempfiles.append(prov_root)
    pz = zipfile.ZipFile(os.path.join(OPTIONS.input_tmp,"RADIO/iago_provision_files.zip"))
    pz.extractall(prov_root)
    pz.close()

    # Copy Android init as init2 and preinit as init, replace init.rc
    shutil.copyfile(os.path.join(ramdisk_root, "init"),
                    os.path.join(ramdisk_root, "init2"))
    shutil.copyfile(os.path.join(prov_root, "preinit"),
                    os.path.join(ramdisk_root, "init"))
    shutil.copyfile(os.path.join(prov_root, "init.provision.rc"),
                    os.path.join(ramdisk_root, "init.rc"))

    # Copy other files unique to provisioning ramdisk out of RADIO/
    for fn in ["iago.ini", "iago-default.ini", "iago-provision.ini"]:
        shutil.copyfile(os.path.join(prov_root, fn),
                os.path.join(ramdisk_root, fn))
    for fn in ["iagod", "efibootmgr"]:
        shutil.copyfile(os.path.join(prov_root, fn),
                os.path.join(ramdisk_root, "sbin", fn))

    # Create some required empty directories
    os.makedirs(os.path.join(ramdisk_root, "installmedia"))
    os.makedirs(os.path.join(ramdisk_root, "tmp"))
    os.makedirs(os.path.join(ramdisk_root, "mnt"))

    # Amend update fs config
    pfcname = os.path.join(OPTIONS.input_tmp, "META/provision_filesystem_config.txt")
    shutil.copyfile(os.path.join(OPTIONS.input_tmp, "META/boot_filesystem_config.txt"),
                    pfcname)
    fsc = open(pfcname, "a")
    for fn in ["sbin/iagod", "init2", "sbin/efibootmgr"]:
        fsc.write("%s 0 0 700\n" % (fn,) )
    for fn in ["iago.ini", "iago-default.ini", "iago-provision.ini"]:
        fsc.write("%s 0 0 600\n" % (fn,) )
    fsc.close()

    # augment the command line
    fp = open(os.path.join(boot_root, "PROVISION/cmdline"), "a")
    fp.write(OPTIONS.kernel_cmdline);
    fp.close()

    # now build the boot image itself
    data = common.BuildBootableImage(os.path.join(boot_root, "PROVISION"),
                                     pfcname, None)
    fp = open(os.path.join(output_root, "provision.img"), 'w')
    fp.write(data)
    fp.close()

    # bootloader config
    os.makedirs(os.path.join(output_root, "loader/entries"))
    lc = open(os.path.join(output_root, "loader/loader.conf"), 'w')
    lc.write(loader_config)
    lc.close()
    lc = open(os.path.join(output_root, "loader/entries/01provision.conf"), 'w')
    lc.write(loader_provision_config)
    lc.close()

    # Copy all the signed EFI binaries
    efidir = os.path.join(OPTIONS.input_tmp, "RADIO")
    for fname in os.listdir(efidir):
        if not fname.endswith(".efi"):
            continue
        absfname = os.path.join(efidir, fname)
        if os.path.isfile(absfname):
            if OPTIONS.verbose:
                print "  copying EFI Binary %s --> %s" % (absfname, imagesdir)
            shutil.copy(absfname, imagesdir)
    bootdir = os.path.join(output_root, "EFI/BOOT")
    os.makedirs(bootdir)

    # HACK just copy the shim to both names, we have no plans to support
    # multiple kernel arches in the same binary image anyway
    shutil.copyfile(os.path.join(efidir, "shim.efi"),
                    os.path.join(bootdir, "BOOTX64.EFI"))
    shutil.copyfile(os.path.join(efidir, "shim.efi"),
                    os.path.join(bootdir, "BOOTIA32.EFI"))

    for fn in ["gummiboot.efi", "MokManager.efi"]:
        shutil.copyfile(os.path.join(efidir, fn),
                    os.path.join(bootdir, fn))

    # build OTA update
    update_fname = os.path.join(imagesdir, "ota.zip")
    if OPTIONS.ota_update:
        shutil.copy(OPTIONS.ota_update, update_fname)
    else:
        call(["build/tools/releasetools/ota_from_target_files",
                args[0], update_fname])

    # preinit stuff
    call(["touch", os.path.join(output_root, "iago-cookie")])

    # Transform the filesystem root into a VFAT filesystem
    _, vfat_img = tempfile.mkstemp(suffix=".vfat")
    OPTIONS.tempfiles.append(vfat_img)
    call(["bootable/iago/tools/make_vfatfs",
        output_root, vfat_img])

    # Create a hard disk image with the VFAT filesystem as the only partition
    try:
        os.remove(args[1])
    except:
        pass
    call(["touch", args[1]])
    call(["editdisklbl", "-v", "-i", args[1], "-l",
        "bootable/iago/live_img_layout.conf",
        "liveimg=" + vfat_img])
    print "done."


if __name__ == '__main__':
  try:
    common.CloseInheritedPipes()
    main(sys.argv[1:])
  except common.ExternalError, e:
    print
    print "   ERROR: %s" % (e,)
    print
    sys.exit(1)
  finally:
    common.Cleanup()
